"""
A valid coordinate [latitude, longitude]
"""
scalar Coordinate

"""
Autogenerated input type of CreateHelloWorld
"""
input CreateHelloWorldInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  name: String!
}

"""
Autogenerated input type of CreatePartner
"""
input CreatePartnerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  partner: PartnerInput!
}

"""
Autogenerated return type of CreatePartner
"""
type CreatePartnerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  partner: Partner!
}

"""
Hello World
"""
type HelloWorld {
  message: String!
}

"""
Geographic MultiPolygon entity
"""
type MultiPolygon {
  coordinates: [[[Coordinate!]!]!]!
  type: String!
}

"""
Geographic MultiPolygon Input
"""
input MultiPolygonInput {
  coordinates: [[[Coordinate!]!]!]!
  type: String!
}

type Mutation {
  createHelloWorld(
    """
    Parameters for CreateHelloWorld
    """
    input: CreateHelloWorldInput!
  ): HelloWorld

  """
  Creates a new parnter
  """
  createPartner(
    """
    Parameters for CreatePartner
    """
    input: CreatePartnerInput!
  ): CreatePartnerPayload
}

"""
Partner entity
"""
type Partner {
  address: Point!
  coverageArea: MultiPolygon!
  document: String!
  id: ID!
  ownerName: String!
  tradingName: String!
}

"""
Partner Input
"""
input PartnerInput {
  address: PointInput!
  coverageArea: MultiPolygonInput!
  document: String!
  ownerName: String!
  tradingName: String!
}

"""
Geographic Point entity
"""
type Point {
  coordinates: Coordinate!
  type: String!
}

"""
Geographic Point Input
"""
input PointInput {
  coordinates: Coordinate!
  type: String!
}

type Query {
  """
  Retrieves a parnter
  """
  retrievePartner(id: ID!): Partner
  showHelloWorld(name: String!): HelloWorld
}